{"version":3,"sources":["components/ContactList/ContactList.module.css","components/Container/Container.module.css","components/Filter/Filter.module.css","components/Container/Container.js","redux/phonebook/phonebook-action.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactList/ContactList.js","App.js","redux/phonebook/phonebook-reducers.js","redux/store.js","index.js","components/ContactForm/ContactForm.module.css"],"names":["module","exports","Container","title","children","className","s","container","addContact","createAction","payload","name","number","id","shortid","generate","deleteContact","changeFilter","ContactForm","onSubmit","useState","setName","setNumber","handleChange","e","target","value","preventDefault","contactForm","label","input","type","autoComplete","onChange","placeholder","pattern","required","submitButton","prototypes","PropTypes","func","connect","dispatch","actions","state","phoneBook","filter","currentTarget","getVisibleContacts","allContacts","normalizedFilter","toLowerCase","contact","includes","contacts","onDeleteContact","list","map","item","buttonDelete","onClick","color","size","App","initialState","contactsReducer","createReducer","addNewContact","filterReducer","_","phoneBookReducer","combineReducers","myMiddleware","store","next","action","console","log","configureStore","reducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d44d5601.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__95DgK\",\"item\":\"ContactList_item__3frcE\",\"buttonDelete\":\"ContactList_buttonDelete__3VsQO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__R8mYZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Filter_input__1vixs\"};","import PropTypes from 'prop-types';\nimport s from '../Container/Container.module.css';\n\nfunction Container({ title, children }) {\n  return (\n    <div className={s.container}>\n      <h2> {title}</h2>\n\n      {children}\n    </div>\n  );\n}\n\nContainer.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.node,\n};\n\nexport default Container;\n","import { createAction } from '@reduxjs/toolkit';\nimport shortid from 'shortid';\n\nconst addContact = createAction('phonebook/Add', ({ name, number }) => ({\n  payload: {\n    name: name,\n    number: number,\n    id: shortid.generate(),\n  },\n}));\n\nconst deleteContact = createAction('phonebook/Delete');\nconst changeFilter = createAction('filter/ChangeFilter');\n\nexport { addContact, deleteContact, changeFilter };\n\n// ===== react redux ============\n\n// import shortid from 'shortid';\n// import phoneBookTypes from './phonebook-types';\n\n// export const addContact = ({ name, number }) => ({\n//   type: phoneBookTypes.ADD,\n//   payload: {\n//     name: name,\n//     number: number,\n//     id: shortid.generate(),\n//   },\n// });\n\n// export const deleteContact = idContact => ({\n//   type: phoneBookTypes.DELETE,\n//   payload: idContact,\n// });\n\n// export const changeFilter = value => ({\n//   type: phoneBookTypes.CHANGE_FILTER,\n//   payload: value,\n// });\n","import PropTypes from 'prop-types';\n\nimport { useState } from 'react';\nimport s from '../ContactForm/ContactForm.module.css';\n\nimport { connect } from 'react-redux';\nimport * as actions from '../../redux/phonebook/phonebook-action';\n\nfunction ContactForm({ onSubmit }) {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const newContact = {\n      name: name,\n      number: number,\n      id: '',\n    };\n\n    onSubmit(newContact);\n    reset();\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className={s.contactForm}>\n      <label className={s.label}>\n        Name:\n        <input\n          className={s.input}\n          type=\"text\"\n          name=\"name\"\n          autoComplete=\"off\"\n          value={name}\n          onChange={handleChange}\n          placeholder=\"Tom Smit\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n        />\n      </label>\n\n      <label className={s.label}>\n        Number:\n        <input\n          className={s.input}\n          type=\"tel\"\n          name=\"number\"\n          autoComplete=\"off\"\n          value={number}\n          onChange={handleChange}\n          placeholder=\"050-50-50\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n        />\n      </label>\n\n      <input className={s.submitButton} type=\"submit\" value=\"Add contact\" />\n    </form>\n  );\n}\n\nContactForm.prototypes = {\n  onSubmit: PropTypes.func,\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onSubmit: ({ name, number }) =>\n    dispatch(actions.addContact({ name, number })),\n});\n\nexport default connect(null, mapDispatchToProps)(ContactForm);\n","import PropTypes from 'prop-types';\nimport s from '../Filter/Filter.module.css';\n\nimport { connect } from 'react-redux';\nimport * as actions from '../../redux/phonebook/phonebook-action';\n\nconst Filter = ({ value, onChange }) => {\n  return (\n    <label>\n      Find contact by name\n      <input\n        className={s.input}\n        type=\"text\"\n        name=\"filter\"\n        autoComplete=\"off\"\n        value={value}\n        onChange={onChange}\n        // onChange = {e = onChange(e.target.value) }\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n        required\n      />\n    </label>\n  );\n};\n\nFilter.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n};\n\nconst mapStateToProps = state => ({\n  value: state.phoneBook.filter,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onChange: e => dispatch(actions.changeFilter(e.currentTarget.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import PropTypes from 'prop-types';\nimport s from '../ContactList/ContactList.module.css';\nimport { TiUserDeleteOutline } from 'react-icons/ti';\n\nimport { connect } from 'react-redux';\nimport * as actions from '../../redux/phonebook/phonebook-action';\n\nfunction ContactList({ contacts, onDeleteContact, filter }) {\n  return (\n    <div>\n      <ul className={s.list}>\n        {contacts.map(contact => (\n          <li className={s.item} key={contact.id}>\n            <p>\n              <span>{contact.name}:</span> <span>{contact.number}</span>\n            </p>\n\n            <button\n              className={s.buttonDelete}\n              type=\"button\"\n              onClick={() => onDeleteContact(contact.id)}\n            >\n              <TiUserDeleteOutline color=\"red\" size=\"18px\" />\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nContactList.propTypes = {\n  contacts: PropTypes.array.isRequired,\n  onDeleteContact: PropTypes.func,\n};\n\nconst getVisibleContacts = (allContacts, filter) => {\n  const normalizedFilter = filter.toLowerCase();\n  return allContacts.filter(contact =>\n    contact.name.toLowerCase().includes(normalizedFilter),\n  );\n};\nconst mapStateToProps = ({ phoneBook: { contacts, filter } }) => ({\n  contacts: getVisibleContacts(contacts, filter),\n});\n\n// const mapStateToProps = state => {\n//   const { filter, contacts } = state.phoneBook;\n//   const normalizedFilter = filter.toLowerCase();\n//   const visibleContacts =  contacts.filter(contact =>\n//       contact.name.toLowerCase().includes(normalizedFilter),\n//   );\n\n//   return {\n//     contacts: visibleContacts,\n//   }\n// };\n\nconst mapDispatchToProps = dispatch => ({\n  onDeleteContact: id => dispatch(actions.deleteContact(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import './App.css';\n\nimport Container from './components/Container/Container';\nimport ContactForm from './components/ContactForm/ContactForm';\nimport Filter from './components/Filter/Filter';\nimport ContactList from './components/ContactList/ContactList';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Phonebook</h1>\n\n      <Container>\n        <ContactForm></ContactForm>\n      </Container>\n\n      <Container title=\"Contacts\">\n        <Filter />\n        <ContactList />\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\n\nimport * as actions from './phonebook-action';\nimport contactsJson from '../../contacts.json';\n\nconst initialState =\n  // JSON.parse(localStorage.getItem('contacts')) ?? contactsJson;\n  contactsJson;\n\nconst addNewContact = (state, payload) => [payload, ...state];\n\nconst deleteContact = (state, payload) =>\n  state.filter(({ id }) => id !== payload);\n\nconst contactsReducer = createReducer(initialState, {\n  [actions.addContact]: (state, { payload }) => addNewContact(state, payload),\n  [actions.deleteContact]: (state, { payload }) =>\n    deleteContact(state, payload),\n});\n\nconst filterReducer = createReducer('', {\n  [actions.changeFilter]: (_, { payload }) => payload,\n});\n\nconst phoneBookReducer = combineReducers({\n  contacts: contactsReducer,\n  filter: filterReducer,\n});\n\nexport default phoneBookReducer;\n\n// ===== react redux ============\n\n// import { combineReducers } from 'redux';\n// import phoneBookTypes from './phonebook-types';\n\n// import contactsJson from '../../contacts.json';\n\n// const initialState =\n//   JSON.parse(window.localStorage.getItem('contacts')) ?? contactsJson;\n\n// const contactsReducer = (state = initialState, { type, payload }) => {\n\n//   switch (type) {\n//     case phoneBookTypes.ADD:\n//       const newStateAdd = [payload, ...state];\n//       window.localStorage.setItem('contacts', JSON.stringify(newStateAdd));\n//       return newStateAdd;\n\n//     case phoneBookTypes.DELETE:\n//       const newStateDelete = state.filter(({ id }) => id !== payload);\n//       window.localStorage.setItem('contacts', JSON.stringify(newStateDelete));\n//       return newStateDelete;\n\n//     default:\n//       return state;\n//   }\n// };\n\n// const filterReducer = (state = '', { type, payload }) => {\n//   switch (type) {\n//     case phoneBookTypes.CHANGE_FILTER:\n//       return payload;\n\n//     default:\n//       return state;\n//   }\n// };\n\n// const phoneBookReducer = combineReducers({\n//   contacts: contactsReducer,\n//   filter: filterReducer,\n// });\n\n// export default phoneBookReducer;\n","\n\n// import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport { configureStore } from '@reduxjs/toolkit';\nimport logger from 'redux-logger';\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\n// import storage from 'redux-persist/lib/storage'; // defaults to localStorage for web\n\nimport phoneBookReducer from './phonebook/phonebook-reducers';\n\n// console.log(process.env.NODE_ENV);//development OR PRODUCTION\n// const middleware = [\n//   ...getDefaultMiddleware({\n//     serializableCheck: {\n//       ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n//     },\n//   }),\n//   logger,\n// ];\n\n// const persistConfig = {\n//   key: 'contacts',\n//   // storage,\n//   // blacklist: ['filter'],\n// };\nconst myMiddleware =  store => next => action =>{\n  console.log('my middleware');\n  next(action);\n}\n\nconst store = configureStore({\n  reducer: {\n    // phoneBook: persistReducer(persistConfig, phoneBookReducer),\n     phoneBook: phoneBookReducer,\n  },\n  // middleware: middleware,\n  middleware: (getDefaultMiddleware) => [...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n    myMiddleware,\n    logger],\n  \n  // devTools: process.env.NODE_ENV === 'development',\n});\n// const persistor = persistStore(store);\n\n// export default { store, persistor };\nexport default store;\n\n// ====== react redux============\n\n// import { composeWithDevTools } from 'redux-devtools-extension';\n// import { createStore, combineReducers } from 'redux';\n// import counterReducer from './counter/counter-reducers';\n// import phoneBookReducer from './phonebook/phonebook-reducers';\n\n// const rootReducer = combineReducers({\n//   counter: counterReducer,\n//   phoneBook: phoneBookReducer,\n// });\n\n// // devTools: process.env.NODE_ENV === 'development',\n\n// const store = createStore(rootReducer, composeWithDevTools());\n\n// export default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n// import { PersistGate } from 'redux-persist/integration/react';\n\nimport './index.css';\nimport App from './App';\n\nimport store from './redux/store';\nimport 'modern-normalize/modern-normalize.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <Provider store={store}> */}\n      {/* <PersistGate loading={null} persistor={store.persistor}> */}\n        <App />\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactForm\":\"ContactForm_contactForm__2ozP3\",\"label\":\"ContactForm_label__1vRCe\",\"input\":\"ContactForm_input__1o0JM\",\"submitButton\":\"ContactForm_submitButton__NjFKd\"};"],"sourceRoot":""}